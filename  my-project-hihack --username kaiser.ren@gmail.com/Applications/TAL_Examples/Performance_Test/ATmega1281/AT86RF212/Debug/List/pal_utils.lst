###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        24/Nov/2012  12:22:59 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\HiJack\PAL\AVR\Generic\Src\pal_utils.c                #
#    Command line =  D:\HiJack\PAL\AVR\Generic\Src\pal_utils.c --cpu=m1281    #
#                    -ms -o D:\HiJack\Applications\TAL_Examples\Performance_T #
#                    est\ATmega1281\AT86RF212\Debug\Obj\ -D DEBUG=0 -D FFD    #
#                    -D HIGH_DATA_RATE_SUPPORT -D ENABLE_TFA -D SIO_HUB -D    #
#                    UART1 -D TAL_TYPE=AT86RF212 -D PAL_TYPE=ATMEGA1281 -D    #
#                    PAL_GENERIC_TYPE=AVR -D BOARD_TYPE=ATZB_900_MN2 -D       #
#                    HIGHEST_STACK_LAYER=PAL -lCN                             #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\AT86RF212\Debug\List\ --remarks -y               #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I         #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\Inc\ -I D:\HiJack\Applications\TAL_Examples\P #
#                    erformance_Test\ATmega1281\ -I                           #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\Helper_Files\SIO_Support\Inc\ -I        #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\Include\ -I                          #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\TAL\Inc\ -I                          #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\TAL\AT86RF212\Inc\ -I                #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\TFA\Inc\ -I                          #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\PAL\Inc\ -I                          #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\PAL\AVR\Generic\Inc\ -I              #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\PAL\AVR\ATMEGA1281\Inc\ -I           #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\PAL\AVR\ATMEGA1281\Boards\ -I        #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\PAL\AVR\ATMEGA1281\Boards\ATZB_900_M #
#                    N2\ -I D:\HiJack\Applications\TAL_Examples\Performance_T #
#                    est\ATmega1281\..\..\..\..\Resources\Buffer_Management\I #
#                    nc\ -I D:\HiJack\Applications\TAL_Examples\Performance_T #
#                    est\ATmega1281\..\..\..\..\Resources\Queue_Management\In #
#                    c\ --eeprom_size 4096 --dlib --dlib_config "D:\Program   #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h" -On                #
#    List file    =  D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\AT86RF212\Debug\List\pal_utils.lst               #
#    Object file  =  D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\AT86RF212\Debug\Obj\pal_utils.r90                #
#                                                                             #
#                                                                             #
###############################################################################

D:\HiJack\PAL\AVR\Generic\Src\pal_utils.c
      1          /**
      2           * @file pal_utils.c
      3           *
      4           * @brief Utilities for PAL for AVR 8-Bit MCUs
      5           *
      6           * This file implementes utilities for the PAL module for AVR 8-Bit MCUs.
      7           *
      8           * $Id: pal_utils.c 21630 2010-04-15 09:02:54Z sschneid $
      9           *
     10           * @author    Atmel Corporation: http://www.atmel.com
     11           * @author    Support email: avr@atmel.com
     12           */
     13          /*
     14           * Copyright (c) 2009, Atmel Corporation All rights reserved.
     15           *
     16           * Licensed under Atmel's Limited License Agreement --> EULA.txt
     17           */
     18          /* === Includes ============================================================ */
     19          
     20          #if (DEBUG > 0)
     21          #include <stdint.h>
     22          #include <stdbool.h>
     23          #include <string.h>
     24          #include <stdio.h>
     25          #include "pal.h"
     26          #ifdef TEST_HARNESS
     27          #include "sio_handler.h"
     28          #endif  /* TEST_HARNESS */
     29          
     30          /* === Macros ============================================================== */
     31          
     32          #ifdef TEST_HARNESS
     33              #define ASSERT_BUFFER_SIZE          (172)
     34          
     35              #define ASSERT_INDICATION           (0x9F)
     36          
     37              /*
     38               * Message length is limited to LARGE_BUFFER_SIZE - 5 to include room for
     39               * SOT, EOT, Length, total buffer length and command code
     40               */
     41              #define ASSERT_MESSAGE_LENGTH       (ASSERT_BUFFER_SIZE - 5)
     42          #else
     43              /**
     44               * The event payload can be max 255 bytes, 1 byte goes as length byte
     45               * for octetstring and 1 byte as command code
     46               */
     47              #define MAX_OCTETSTRING_SIZE        (253)
     48          #endif  /* TEST_HARNESS */
     49          
     50          /* === Globals ============================================================= */
     51          
     52          #ifdef TEST_HARNESS
     53              static uint8_t assert_msg[sizeof(assert_t) + ASSERT_BUFFER_SIZE - sizeof(uint8_t)];
     54          #else
     55              /* Holds the assert message to be printed. */
     56              static char tmpbuf[MAX_OCTETSTRING_SIZE];
     57          #endif  /* TEST_HARNESS */
     58          
     59          /* === Prototypes ========================================================== */
     60          
     61          
     62          /* === Implementation ====================================================== */
     63          
     64          /**
     65           * @brief Tests for Assertion
     66           *
     67           * This function tests the assertion of a given expression and
     68           * if the expression fails, a message is printed. This function
     69           * is implemented similar to the C library function except
     70           * that the processing will not be aborted if the assertion fails.
     71           *
     72           * @param expression To be tested for assertion
     73           * @param message Data to be printed over SIO
     74           * @file file File in which assertion has to be tested.
     75           * @line line Line number on which assertion has to be tested.
     76           */
     77          void pal_assert(bool expression,
     78                          FLASH_STRING_T message,
     79                          int8_t *file,
     80                          uint16_t line)
     81          {
     82              /*
     83               * Assert for the expression. This expression should be true always,
     84               * false indicates that something went wrong
     85               */
     86              if (!expression)
     87              {
     88          #ifdef TEST_HARNESS
     89                  assert_t *assert_details = (assert_t *)&assert_msg[0];
     90                  uint8_t assert_string[ASSERT_BUFFER_SIZE];
     91          
     92                  /* Only used for test environment */
     93                  assert_details->assert_cmdcode = ASSERT_INDICATION;
     94          
     95                  /* Copy the assertion message to RAM */
     96                  PGM_STRCPY((char *)assert_string, message);
     97          
     98                  /*
     99                   * Put total length of message to be printed in data[0] of echo
    100                   * indication. Data will be copied from failure_msg->data[1]
    101                   * The function snprintf is used for copying variable
    102                   * number of charaters into failure_msg->data
    103                   */
    104                  assert_details->data[0] = snprintf((char *)&(assert_details->data[1]),
    105                      ASSERT_MESSAGE_LENGTH,"%s, line %d: assertion %s failed -",
    106                      file, line, assert_string);
    107          
    108                  /*
    109                   * The function snprintf returns the number of characters that
    110                   * would have been printed if there was enough room.
    111                   * Take the actual number of bytes that are printed
    112                   */
    113                  assert_details->data[0] =
    114                    strlen((const char *)&(assert_details->data[1]));
    115          
    116                  /* Total size of echo indication */
    117                  assert_details->size = sizeof(assert_t) + assert_details->data[0] -
    118                                          sizeof(assert_details->size);
    119          
    120                  /* Write into UART/USB */
    121                  sio_write((uint8_t*)assert_details);
    122          #else
    123                  /* Standard for all applications */
    124                  PGM_STRCPY(tmpbuf, message);
    125                  tmpbuf[PGM_STRLEN(message)+1] = '\0';
    126                  PRINTF("Assertion Failed on File %s, line %d, expression %s\n",
    127                          file, line, tmpbuf);
    128          #endif  /* TEST_HARNESS */
    129              }
    130          }
    131          
    132          #endif  /* (DEBUG > 0) */
    133          
    134          
    135          /* EOF */


 

 


Errors: none
Warnings: none
