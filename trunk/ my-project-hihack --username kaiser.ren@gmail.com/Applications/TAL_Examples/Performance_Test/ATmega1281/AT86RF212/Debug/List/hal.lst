###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        24/Nov/2012  12:22:58 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\hal.c                                            #
#    Command line =  D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\hal.c --cpu=m1281 -ms -o                         #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\AT86RF212\Debug\Obj\ -D DEBUG=0 -D FFD -D        #
#                    HIGH_DATA_RATE_SUPPORT -D ENABLE_TFA -D SIO_HUB -D       #
#                    UART1 -D TAL_TYPE=AT86RF212 -D PAL_TYPE=ATMEGA1281 -D    #
#                    PAL_GENERIC_TYPE=AVR -D BOARD_TYPE=ATZB_900_MN2 -D       #
#                    HIGHEST_STACK_LAYER=PAL -lCN                             #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\AT86RF212\Debug\List\ --remarks -y               #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I         #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\Inc\ -I D:\HiJack\Applications\TAL_Examples\P #
#                    erformance_Test\ATmega1281\ -I                           #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\Helper_Files\SIO_Support\Inc\ -I        #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\Include\ -I                          #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\TAL\Inc\ -I                          #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\TAL\AT86RF212\Inc\ -I                #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\TFA\Inc\ -I                          #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\PAL\Inc\ -I                          #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\PAL\AVR\Generic\Inc\ -I              #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\PAL\AVR\ATMEGA1281\Inc\ -I           #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\PAL\AVR\ATMEGA1281\Boards\ -I        #
#                    D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\..\..\..\..\PAL\AVR\ATMEGA1281\Boards\ATZB_900_M #
#                    N2\ -I D:\HiJack\Applications\TAL_Examples\Performance_T #
#                    est\ATmega1281\..\..\..\..\Resources\Buffer_Management\I #
#                    nc\ -I D:\HiJack\Applications\TAL_Examples\Performance_T #
#                    est\ATmega1281\..\..\..\..\Resources\Queue_Management\In #
#                    c\ --eeprom_size 4096 --dlib --dlib_config "D:\Program   #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h" -On                #
#    List file    =  D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\AT86RF212\Debug\List\hal.lst                     #
#    Object file  =  D:\HiJack\Applications\TAL_Examples\Performance_Test\ATm #
#                    ega1281\AT86RF212\Debug\Obj\hal.r90                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\HiJack\Applications\TAL_Examples\Performance_Test\ATmega1281\hal.c
      1          /**
      2           * @file hal.c
      3           *
      4           * @brief hal board specific functionality
      5           *
      6           * This file implements hal board specific functionality.
      7           *
      8           * @author    kren
      9           * @data		Nov 21, 2012
     10           */
     11          
     12          /* === Includes ============================================================ */
     13          #include "hal.h"

   \                                 In  segment ABSOLUTE, at 0x61
   \   union <unnamed> volatile __io _A_CLKPR
   \                     _A_CLKPR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUSR
   \                     _A_MCUSR:
   \   00000000                      DS8 1

   \                                 In  segment CODE, align 2, keep-with-next
   \   static __version_3 void pal_global_irq_enable(void)
   \                     pal_global_irq_enable:
   \   00000000   9478               SEI
   \   00000002   9508               RET
     14          
     15          
     16          /* === Implementation ====================================================== */
     17          /**
     18           * @brief Initialize the system clock
     19           *
     20           * This function sets the system clock by enabling the internal RC oscillator
     21           * with the proper prescaler (if available).
     22           * Ensure that CKDIV8 fuse does not affect the system clock prescaler.
     23           *
     24           */

   \                                 In  segment CODE, align 2, keep-with-next
     25          static void mcu_clock_init(void)
   \                     mcu_clock_init:
     26          {
     27          /*
     28           * This is only allowed if the AVR 8-bit MCU already has a clock prescaler.
     29           * For older devices this function does not make sense.
     30           * Therefore the existence of register CLKPR is checked.
     31           */
     32          //#ifdef CLKPR    /* Is clock prescaler existing? */
     33          
     34          #if (F_CPU == (8000000UL))
     35          #ifdef __ICCAVR__
     36              ENTER_CRITICAL_REGION();
     37              CLKPR = 0x80;
     38              CLKPR = 0x00;
     39              LEAVE_CRITICAL_REGION();
     40          #else
     41              clock_prescale_set(clock_div_1);
     42          #endif  /* __ICCAVR__ */
     43          #endif  /* (F_CPU == (8000000UL) */
     44          
     45          #if (F_CPU == (4000000UL))
     46          #ifdef __ICCAVR__
     47              ENTER_CRITICAL_REGION();
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
     48              CLKPR = 0x80;
   \   00000004   E800               LDI     R16, 128
   \   00000006   9300....           STS     _A_CLKPR, R16
     49              CLKPR = 0x01;
   \   0000000A   E001               LDI     R16, 1
   \   0000000C   9300....           STS     _A_CLKPR, R16
     50              LEAVE_CRITICAL_REGION();
   \   00000010   BF1F               OUT     0x3F, R17
     51          #else
     52              clock_prescale_set(clock_div_2);
     53          #endif  /* __ICCAVR__ */
     54          #endif  /* (F_CPU == (4000000UL) */
     55          
     56          #if (F_CPU == (2000000UL))
     57          #ifdef __ICCAVR__
     58              ENTER_CRITICAL_REGION();
     59              CLKPR = 0x80;
     60              CLKPR = 0x02;
     61              LEAVE_CRITICAL_REGION();
     62          #else
     63              clock_prescale_set(clock_div_4);
     64          #endif  /* __ICCAVR__ */
     65          #endif  /* (F_CPU == (2000000UL) */
     66          
     67          #if (F_CPU == (1000000UL))
     68          #ifdef __ICCAVR__
     69              ENTER_CRITICAL_REGION();
     70              CLKPR = 0x80;
     71              CLKPR = 0x03;
     72              LEAVE_CRITICAL_REGION();
     73          #else
     74              clock_prescale_set(clock_div_8);
     75          #endif  /* __ICCAVR__ */
     76          #endif  /* (F_CPU == (1000000UL) */
     77          
     78          //#endif  /* CLKPR */
     79          }
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_SREG
   \   00000014                      REQUIRE _A_CLKPR
     80          
     81          /**
     82           * @brief Initialization of wdt
     83           */

   \                                 In  segment CODE, align 2, keep-with-next
     84          static void wdt_init(void)
   \                     wdt_init:
     85          {
     86            	__watchdog_reset();
   \   00000000   95A8               WDR
     87          	/* Clear WDRF in MCUSR */
     88          		MCUSR &= ~(1<<WDRF);
   \   00000002   B704               IN      R16, 0x34
   \   00000004   7F07               ANDI    R16, 0xF7
   \   00000006   BF04               OUT     0x34, R16
     89          		/* Write logical one to WDCE and WDE */
     90          		/* Keep old prescaler setting to prevent unintentional time-out
     91          		*/
     92          		WDTCSR |= (1<<WDCE) | (1<<WDE);
   \   00000008   9100....           LDS     R16, _A_WDTCSR
   \   0000000C   6108               ORI     R16, 0x18
   \   0000000E   9300....           STS     _A_WDTCSR, R16
     93          		/* Turn off WDT */
     94          		WDTCSR = 0x00;
   \   00000012   E000               LDI     R16, 0
   \   00000014   9300....           STS     _A_WDTCSR, R16
     95          }
   \   00000018   9508               RET
   \   0000001A                      REQUIRE _A_MCUSR
   \   0000001A                      REQUIRE _A_WDTCSR
     96          
     97          /**
     98           * @brief Initialization of hal
     99           */

   \                                 In  segment CODE, align 2, keep-with-next
    100          void hal_init(void)
   \                     hal_init:
    101          {
    102          	/* Config mcu clock. */
    103             mcu_clock_init();
   \   00000000   ....               RCALL   mcu_clock_init
    104          	
    105          	/* Calibrate MCU's RC oscillator */
    106              //pal_calibrate_rc_osc();
    107          	
    108          	/* wdt initial. */
    109          	wdt_init();
   \   00000002   ....               RCALL   wdt_init
    110          	
    111          	/*
    112          		analog initial.
    113          		AIN0, positive, is PE2 on mcu, module pin 40, which connect with
    114          		battery+ for reference.
    115          	*/
    116          	ac_init();
   \   00000004   ........           CALL    ac_init
    117          	
    118          	/* Initialize the serial interface used for communication with terminal program */
    119              pal_sio_init(SIO_CHANNEL);
   \   00000008   E001               LDI     R16, 1
   \   0000000A   ........           CALL    pal_sio_init
    120          
    121          	/*
    122               * The stack is initialized above, hence the global interrupts are enabled
    123               * here.
    124               */
    125              pal_global_irq_enable();
   \   0000000E   ....               RCALL   pal_global_irq_enable
    126          }
   \   00000010   9508               RET
    127          
    128          //eof

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       0      2  hal_init
                   0 2 -> ac_init
                   0 2 -> mcu_clock_init
                   0 2 -> pal_global_irq_enable
                   0 2 -> pal_sio_init
                   0 2 -> wdt_init
       0      2  mcu_clock_init
       0      2  pal_global_irq_enable
       0      2  wdt_init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_CLKPR
       1  _A_MCUSR
       1  _A_SREG
       1  _A_WDTCSR
      18  hal_init
      20  mcu_clock_init
       4  pal_global_irq_enable
      26  wdt_init

 
  4 bytes in segment ABSOLUTE
 68 bytes in segment CODE
 
 68 bytes of CODE memory
  0 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
